@function color-by-state($color, $states, $state) {
  $tone: map-get($states, $state);
  @return var(--color-#{$color}-#{$tone});
}

@mixin button-text-color($color) {
  color: $color;
}

@mixin button-text-effect($color, $states) {
  @include button-text-color(color-by-state($color, $states, base));
  &.is-disabled {
    cursor: not-allowed;
    opacity: 0.5;
    @include button-text-color(var(--color-#{$color}-300));
  }

  &:not(.is-disabled):not(.has-image):not(.is-dropdown):active {
    @include button-text-color(color-by-state($color, $states, focus));
  }
}

@mixin link-button($color, $states) {
  @include button-text-effect($color, $states);
  &:not(.is-disabled):not(.has-image):not(.is-dropdown):hover {
    @include button-text-color(color-by-state($color, $states, hover));
  }
}

@mixin text-button($color, $states) {
  @include button-text-effect($color, $states);
  &:not(.is-disabled):not(.has-image):not(.is-dropdown):hover {
    background: var(--color-#{$color}-50);
  }

  &:not(.is-disabled):not(.has-image):not(.is-dropdown):active {
    border: 1px solid color-by-state($color, $states, focus);
    background: var(--color-#{$color}-100);
  }
}

@mixin filled-button($color, $states) {
  &:not(.is-white) {
    @include button-text-color(var(--color-gray-900));
    background: color-by-state($color, $states, base);
  }
  &.is-disabled {
    cursor: not-allowed;
    opacity: 0.5;
    background: var(--color-#{$color}-300);
  }
  &:not(.is-disabled):not(.has-image):not(.is-dropdown):hover {
    background: color-by-state($color, $states, hover);
  }

  &:not(.is-disabled):not(.has-image):not(.is-dropdown):active {
    background: color-by-state($color, $states, focus);
  }
}

@mixin create-buttons($label, $color, $base-tone: 300) {
  $color-tones: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900;

  $base-index: index($color-tones, $base-tone);
  $states: (
    base: $base-tone,
    hover: nth($color-tones, $base-index + 1),
    focus: nth($color-tones, $base-index + 2),
  );

  .button {
    .loader {
      color: color-by-state($color, $states, base);
    }
  }

  .button.#{$label}:not(.is-outlined):not(.is-text):not(.is-link) {
    @include filled-button($color, $states);
  }

  .button.#{$label}.is-outlined {
    @include text-button($color, $states);
    border: 1px solid var(--color-#{$color}-#{$base-tone});
    &.is-disabled {
      cursor: not-allowed;
      opacity: 0.5;
      border: 1px solid var(--color-#{$color}-300);
    }
  }

  .button.#{$label}.is-text {
    @include text-button($color, $states);
  }

  .button.#{$label}.is-link {
    @include link-button($color, $states);
    padding-left: 0;
    padding-right: 0;
  }
}

@mixin focus() {
  &.is-focused,
  &:focus,
  &:focus-visible,
  &:focus-within {
    @content;
  }
}

button.button {
  -webkit-appearance: none;
  appearance: none;
  border-radius: var(--fields-radius);
  border: 1px solid transparent;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: var(--p-font-size);
  font-weight: 700;
  outline: none;
  padding: 12px 24px;
  position: relative;
  &:not([class*="min-w-"]) {
    min-width: auto;
  }

  &.is-small {
    padding: 8px 16px;
    font-size: var(--p-2-font-size);
  }
  &:hover,
  &:focus,
  &:active {
    transition-duration: var(--base-transition-timing);
    transition-property: background-color, background, padding, color, border, border-color;
    transition-timing-function: var(--base-transition-timing-function);
  }
}

@include create-buttons(is-primary, "primary", 700);
@include create-buttons(is-secondary, "secondary", 700);
@include create-buttons(is-tertiary, "tertiary", 700);
@include create-buttons(is-orange, "orange", 700);
